<div class="component">
  <div class="title">Memory</div>
  <div class="tables">
    <%ctx.memoryIntervals.forEach((interval) => {%>
      <div class="table">
        <div class="cols-names">
          <div class="col tags"><div class="col-name"></div></div>
          <div class="col address">
            <div class="col-name">Addr</div>
            <div class="col-format">
                <%
                const addrValues = ["hexadecimal", "decimal"]
                let addressFormat = (interval.formats && interval.formats.address) || "hexadecimal";
                let currAddrValue = addrValues.indexOf(addressFormat) || 0;
                %>
                <button
                  type="button"
                  class="state-btn"
                  id="memory-address-format_<%=interval.id%>" 
                  onclick="cycleStateBtn(this, colFormatSelectOnChange)"
                  data-values="<%=addrValues%>"
                  data-current="<%=currAddrValue%>"
                ><%=getStateBtnText(addressFormat)%></button>
            </div>
          </div>
          <div class="col value">
            <div class="col-name">Value</div>
            <%
              const valueFormatOptions = ["int", "uint", "hexadecimal", "ascii", "binary", "asm"];
              let valueFormat = (interval.formats && interval.formats.value) || "decimal";
            %>
            <div class="col-format">
              <select name="col-format" id="memory-value-format_<%=interval.id%>" onchange="colFormatSelectOnChange(this)" data-id="<%=interval.id%>">
                <%valueFormatOptions.forEach(val => {%>
                <option value="<%=val%>" <%=valueFormat === val ? "selected" : ""%>>
                  <%=getStateBtnText(val, true)%>
                </option>
                <%})%>
              </select>
              <%
              let granularityValues = ["word", "half", "byte"];
              if (valueFormat === "ascii") {
                granularityValues = [ "byte" ];
              } else if (["binary", "asm"].includes(valueFormat)) {
                granularityValues = [ "word" ];
              }
              let valueGranularity = (interval.formats && interval.formats.valueGranularity) || "word";;
              let currentGranularity = granularityValues.indexOf(valueGranularity) || 0;
              %>
              <button
                type="button"
                class="state-btn"
                id="memory-value-granularity_<%=interval.id%>" 
                onclick="cycleStateBtn(this, colFormatSelectOnChange)"
                data-values="<%=granularityValues%>"
                data-current="<%=currentGranularity%>"
                data-id="<%=interval.id%>"
              ><%=getStateBtnText(valueGranularity)%></button>
            </div>
          </div>
        </div>
        <div class="rows" data-intervalid="<%=interval.id%>" name="memoryIntervalTable">
          <%interval.cells.forEach((cell) => {%>
            <%if (cell) {%>
              <div class="row
              <%=ctx.selectedInstructionAddresses.includes(cell.address) && (ctx.editorState === "execute") && (ctx.interfaceState === 'execute')
                  ? "selected-instruction" : "" %>
                <%=cell.userDefined ? "userDefined" : ""%>">
                <div class="col tags">
                  <%if (cell.tags.length > 0) {%>
                  <div class="static-tags">
                    <%cell.tags.forEach((tag) => {%>
                    <%if (['section', 'label'].includes(tag.type)) {%>
                    <div class="tag <%=tag.type%>"><%=tag.name%></div>
                    <%}%>
                    <%});%>
                  </div>
                  <div class="dynamic-tags">
                    <%cell.tags.forEach((tag) => {%>
                    <%if (['pc', 'register'].includes(tag.type)) {%>
                    <div class="tag <%=tag.type%>"><%=tag.name%></div>
                    <%}%>
                    <%});%>
                  </div>
                  <%}%>
                </div>

                <div class="col address <%=addressFormat%>">
                  <%=convert(addressFormat, cell.address)%>
                </div>

                <%let highlightClass = "";
                  if (ctx.vm.lastReadMem === cell.address) {
                    highlightClass = "last-read";
                  } else if (ctx.vm.lastWrittenMem === cell.address) {
                    highlightClass = "last-changed";
                  }
                %>
                <% if (valueGranularity == 'half') {%>
                  <div class="col granular">
                    <%let parts = [cell.binary.getBits(31,16), cell.binary.getBits(15,0)]
                    for (let part of parts) {%>
                      <div class="col value <%=valueFormat%> <%=highlightClass%>">
                        <%=convert(valueFormat, part)%>
                      </div>
                    <%}%>
                  </div>
                <%} else if (valueGranularity == 'byte') {%>
                  <div class="col granular">
                    <%let parts = [cell.binary.getBits(31,24), cell.binary.getBits(23,16), cell.binary.getBits(15,8), cell.binary.getBits(7,0)]
                    for (let part of parts) {%>
                      <div class="col value <%=valueFormat%> <%=highlightClass%>">
                        <%=convert(valueFormat, part)%>
                      </div>
                    <%}%>
                  </div>
                <%} else {%>
                  <div class="col value <%=valueFormat%> <%=highlightClass%>">
                    <%=convert(valueFormat, cell.binary)%>
                  </div>
                <%}%>
              </div>
            <%}%>
          <%});%>
        </div>
      </div>
    <%});%>
  </div>
</div>
